"""
Arquivo de teste para verificar funcionalidades b√°sicas do sistema.
"""
import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))

import pytest
from unittest.mock import Mock, patch
from src.config import Config
from src.router import IntentionRouter, RouterChain


class TestConfig:
    """Testes para a classe Config."""
    
    def test_config_initialization(self):
        """Testa inicializa√ß√£o da configura√ß√£o."""
        config = Config()
        
        # Verifica constantes b√°sicas
        assert config.GROQ_MODEL == "llama3-8b-8192"
        assert config.EMBEDDING_DIMENSION == 384
        assert config.TOP_K_RESULTS == 5
        assert len(config.SUPPORTED_CITIES) >= 2
        assert len(config.INTENTIONS) == 4
    
    def test_intentions_mapping(self):
        """Testa mapeamento de inten√ß√µes."""
        config = Config()
        
        expected_intentions = [
            "roteiro-viagem",
            "logistica-transporte", 
            "info-local",
            "traducao-idiomas"
        ]
        
        for intention in expected_intentions:
            assert intention in config.INTENTIONS
            assert len(config.INTENTIONS[intention]) > 0


class TestIntentionRouter:
    """Testes para classifica√ß√£o de inten√ß√µes."""
    
    def setup_method(self):
        """Configura testes com mock do LLM."""
        with patch('src.router.ChatGroq') as mock_groq:
            mock_groq.return_value = Mock()
            self.router = IntentionRouter()
    
    def test_fallback_classification_roteiro(self):
        """Testa classifica√ß√£o fallback para roteiros."""
        queries = [
            "Quero um roteiro para Paris",
            "Plano de viagem para o Rio",
            "Itiner√°rio de 3 dias",
            "O que visitar em Paris"
        ]
        
        for query in queries:
            result = self.router._fallback_classification(query)
            assert result == "roteiro-viagem"
    
    def test_fallback_classification_transporte(self):
        """Testa classifica√ß√£o fallback para transporte."""
        queries = [
            "Como chegar ao Cristo Redentor",
            "Onde fica o metr√¥",
            "Pre√ßo do t√°xi",
            "Como ir ao aeroporto"
        ]
        
        for query in queries:
            result = self.router._fallback_classification(query)
            assert result == "logistica-transporte"
    
    def test_fallback_classification_info_local(self):
        """Testa classifica√ß√£o fallback para informa√ß√µes locais."""
        queries = [
            "Hor√°rio do museu",
            "Pre√ßo do ingresso",
            "Melhores restaurantes",
            "Onde comer"
        ]
        
        for query in queries:
            result = self.router._fallback_classification(query)
            assert result == "info-local"
    
    def test_fallback_classification_traducao(self):
        """Testa classifica√ß√£o fallback para tradu√ß√£o."""
        queries = [
            "Como dizer obrigado em franc√™s",
            "Frases √∫teis em ingl√™s",
            "Traduzir card√°pio",
            "Falar portugu√™s"
        ]
        
        for query in queries:
            result = self.router._fallback_classification(query)
            assert result == "traducao-idiomas"


class TestRouterChain:
    """Testes para o RouterChain."""
    
    def setup_method(self):
        """Configura testes."""
        with patch('src.router.ChatGroq') as mock_groq:
            mock_groq.return_value = Mock()
            self.router_chain = RouterChain()
    
    def test_extract_query_info_cities(self):
        """Testa extra√ß√£o de cidades."""
        queries_cities = [
            ("Roteiro em Paris", ["Paris"]),
            ("Viagem ao Rio de Janeiro", ["Rio de Janeiro"]),
            ("Paris e Rio", ["Paris", "Rio de Janeiro"])
        ]
        
        for query, expected_cities in queries_cities:
            info = self.router_chain._extract_query_info(query, "roteiro-viagem")
            for city in expected_cities:
                assert city in info["cities"]
    
    def test_extract_query_info_duration(self):
        """Testa extra√ß√£o de dura√ß√£o."""
        queries_duration = [
            ("Roteiro de 3 dias", 3),
            ("Viagem por 5 dias", 5), 
            ("Plano para 1 dia", 1)
        ]
        
        for query, expected_duration in queries_duration:
            info = self.router_chain._extract_query_info(query, "roteiro-viagem")
            assert info.get("duration_days") == expected_duration
    
    def test_extract_query_info_interests(self):
        """Testa extra√ß√£o de interesses."""
        queries_interests = [
            ("Roteiro cultural", ["cultural"]),
            ("Viagem gastron√¥mica", ["gastronomico"]),
            ("Aventura em fam√≠lia", ["aventura", "familiar"])
        ]
        
        for query, expected_interests in queries_interests:
            info = self.router_chain._extract_query_info(query, "roteiro-viagem")
            for interest in expected_interests:
                assert interest in info["interests"]


# Testes de integra√ß√£o simplificados
def test_system_imports():
    """Testa se todas as importa√ß√µes funcionam corretamente."""
    try:
        from src.config import Config
        from src.router import RouterChain, IntentionRouter
        from src.chains.itinerary_chain import ItineraryChain
        from src.chains.logistics_chain import LogisticsChain
        from src.chains.local_info_chain import LocalInfoChain
        from src.chains.translation_chain import TranslationChain
        
        # Testa inicializa√ß√£o b√°sica
        config = Config()
        assert config is not None
        
        print("‚úÖ Todas as importa√ß√µes funcionaram corretamente")
        
    except ImportError as e:
        pytest.fail(f"Falha na importa√ß√£o: {e}")


def test_config_validation():
    """Testa valida√ß√£o de configura√ß√£o."""
    config = Config()
    
    # Mock das vari√°veis necess√°rias para teste
    original_groq = config.GROQ_API_KEY
    original_pinecone = config.PINECONE_API_KEY
    
    try:
        config.GROQ_API_KEY = None
        config.PINECONE_API_KEY = None
        
        with pytest.raises(ValueError):
            config.validate()
            
    finally:
        config.GROQ_API_KEY = original_groq
        config.PINECONE_API_KEY = original_pinecone


if __name__ == "__main__":
    """Executa testes b√°sicos sem pytest."""
    
    print("üß™ EXECUTANDO TESTES B√ÅSICOS")
    print("="*50)
    
    try:
        # Teste de importa√ß√µes
        print("1. Testando importa√ß√µes...")
        test_system_imports()
        
        # Teste de configura√ß√£o  
        print("2. Testando configura√ß√µes...")
        config = Config()
        print(f"   ‚úÖ Modelo configurado: {config.GROQ_MODEL}")
        print(f"   ‚úÖ Cidades suportadas: {len(config.SUPPORTED_CITIES)}")
        print(f"   ‚úÖ Inten√ß√µes configuradas: {len(config.INTENTIONS)}")
        
        # Teste de router b√°sico
        print("3. Testando router b√°sico...")
        with patch('src.router.ChatGroq') as mock_groq:
            mock_groq.return_value = Mock()
            router = IntentionRouter()
            
            # Testa classifica√ß√£o fallback
            test_queries = [
                ("Roteiro para Paris", "roteiro-viagem"),
                ("Como chegar l√°", "logistica-transporte"),
                ("Restaurantes bons", "info-local"),
                ("Frases em franc√™s", "traducao-idiomas")
            ]
            
            for query, expected in test_queries:
                result = router._fallback_classification(query)
                assert result == expected, f"Falha para '{query}': esperado {expected}, obtido {result}"
            
        print("   ‚úÖ Router funcionando corretamente")
        
        print(f"\n{'='*50}")
        print("üéâ TODOS OS TESTES B√ÅSICOS PASSARAM!")
        print("\nüìù Para executar testes completos:")
        print("   pip install pytest")
        print("   pytest test_basic.py -v")
        
    except Exception as e:
        print(f"‚ùå Erro nos testes: {str(e)}")
        import traceback
        traceback.print_exc()