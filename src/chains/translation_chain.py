"""
Translation Chain - Respons√°vel por guias de tradu√ß√£o e frases √∫teis.
"""

from typing import Dict, Any
from langchain_core.prompts import PromptTemplate
from langchain_core.output_parsers import StrOutputParser
from langchain_groq import ChatGroq
from ..config import Config


class TranslationChain:
    def __init__(self, rag_system=None):
        self.config = Config()
        self.rag_system = rag_system
        self.llm = ChatGroq(
            groq_api_key=self.config.GROQ_API_KEY,
            model_name=self.config.GROQ_MODEL,
            temperature=0.1,
        )
        self.translation_template = PromptTemplate(
            input_variables=["query", "target_language", "context", "travel_scenario"],
            template="""üåç ESPECIALISTA EM TRADU√á√ÉO PARA VIAJANTES

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üó£Ô∏è  SOLICITA√á√ÉO: {query}
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üá∫üá≥ IDIOMA ALVO: {target_language}
üéØ CONTEXTO: {context}
üé¨ CEN√ÅRIO: {travel_scenario}

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üìö ORGANIZE POR CATEGORIAS:

üëã CUMPRIMENTOS B√ÅSICOS
üçΩÔ∏è  NO RESTAURANTE  
üè® NO HOTEL
üöå TRANSPORTE
üÜò EMERG√äNCIAS
üõí COMPRAS
üïê N√öMEROS E HOR√ÅRIOS
üôè FRASES DE CORTESIA

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üìñ FORMATO PARA CADA FRASE:
   üáßüá∑ Portugu√™s ‚Üí üåç Tradu√ß√£o ‚Üí üîä Pron√∫ncia

üé≠ EXTRAS IMPORTANTES:
   ‚Ä¢ Dicas culturais e gestos espec√≠ficos
   ‚Ä¢ Varia√ß√µes regionais relevantes  
   ‚Ä¢ Exemplos pr√°ticos de uso
   ‚Ä¢ Situa√ß√µes onde usar cada frase

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üéä SEU GUIA DE TRADU√á√ÉO:""",
        )

        # Cria a chain
        self.chain = self.translation_template | self.llm | StrOutputParser()

    def get_translation_guide(self, route_info: Dict[str, Any]) -> Dict[str, Any]:
        query = route_info["original_query"]
        extracted_info = route_info["extracted_info"]

        # Detecta idioma alvo e contexto
        target_language = self._detect_target_language(query, extracted_info)
        context = self._extract_travel_context(query, extracted_info)
        travel_scenario = self._identify_travel_scenario(query)

        try:
            # Gera guia de tradu√ß√£o
            translation_guide = self.chain.invoke(
                {
                    "query": query,
                    "target_language": target_language,
                    "context": context,
                    "travel_scenario": travel_scenario,
                }
            )

            return {
                "success": True,
                "translation_guide": translation_guide,
                "target_language": target_language,
                "travel_context": context,
                "scenario": travel_scenario,
            }

        except Exception as e:
            return {
                "success": False,
                "error": f"Erro ao gerar guia de tradu√ß√£o: {str(e)}",
            }

    def _detect_target_language(self, query: str, extracted_info: Dict) -> str:
        query_lower = query.lower()

        # Mapeamento de idiomas comuns para turistas
        language_keywords = {
            "franc√™s": "Franc√™s",
            "frances": "Franc√™s",
            "french": "Franc√™s",
            "ingl√™s": "Ingl√™s",
            "ingles": "Ingl√™s",
            "english": "Ingl√™s",
            "espanhol": "Espanhol",
            "spanish": "Espanhol",
            "italiano": "Italiano",
            "italian": "Italiano",
            "alem√£o": "Alem√£o",
            "alemao": "Alem√£o",
            "german": "Alem√£o",
            "japon√™s": "Japon√™s",
            "japones": "Japon√™s",
            "japanese": "Japon√™s",
        }

        # Procura por men√ß√µes diretas do idioma
        for keyword, language in language_keywords.items():
            if keyword in query_lower:
                return language

        # Tenta detectar pela cidade mencionada
        cities = extracted_info.get("cities", [])
        city_languages = {
            "Paris": "Franc√™s",
            "Rio de Janeiro": "Portugu√™s (para estrangeiros)",
        }

        if cities:
            main_city = cities[0]
            if main_city in city_languages:
                return city_languages[main_city]

        # Detecta pela men√ß√£o de pa√≠s
        country_keywords = {
            "fran√ßa": "Franc√™s",
            "france": "Franc√™s",
            "brasil": "Portugu√™s",
            "brazil": "Portugu√™s",
            "estados unidos": "Ingl√™s",
            "eua": "Ingl√™s",
            "usa": "Ingl√™s",
        }

        for country, language in country_keywords.items():
            if country in query_lower:
                return language

        # Default: se n√£o detectou, pergunta sobre idiomas gerais para turistas
        return "Idiomas √∫teis para turistas (Ingl√™s, Franc√™s, Espanhol)"

    def _extract_travel_context(self, query: str, extracted_info: Dict) -> str:
        """Extrai contexto da viagem da consulta."""
        context_parts = []

        # Contexto da cidade/pa√≠s
        cities = extracted_info.get("cities", [])
        if cities:
            context_parts.append(f"Viagem para {cities[0]}")

        # Contexto de dura√ß√£o
        duration = extracted_info.get("duration_days")
        if duration:
            context_parts.append(f"Estadia de {duration} dias")

        # Contexto de interesses
        interests = extracted_info.get("interests", [])
        if interests:
            context_parts.append(f"Interesses: {', '.join(interests)}")

        # Contexto espec√≠fico da consulta
        query_lower = query.lower()
        specific_contexts = []

        if "neg√≥cios" in query_lower or "trabalho" in query_lower:
            specific_contexts.append("viagem de neg√≥cios")
        elif "fam√≠lia" in query_lower or "crian√ßa" in query_lower:
            specific_contexts.append("viagem em fam√≠lia")
        elif "rom√¢ntico" in query_lower or "lua de mel" in query_lower:
            specific_contexts.append("viagem rom√¢ntica")
        elif "estudante" in query_lower or "mochileiro" in query_lower:
            specific_contexts.append("viagem econ√¥mica")

        if specific_contexts:
            context_parts.extend(specific_contexts)

        return "; ".join(context_parts) if context_parts else "Viagem tur√≠stica geral"

    def _identify_travel_scenario(self, query: str) -> str:
        """Identifica o cen√°rio espec√≠fico de uso das tradu√ß√µes."""
        query_lower = query.lower()

        # Cen√°rios espec√≠ficos
        scenarios = {
            "restaurante": ["restaurante", "comer", "comida", "card√°pio", "gar√ßom"],
            "hotel": ["hotel", "hospedagem", "check-in", "quarto", "recep√ß√£o"],
            "transporte": ["transporte", "metr√¥", "√¥nibus", "t√°xi", "aeroporto"],
            "compras": ["compras", "loja", "pre√ßo", "pagar", "shopping"],
            "emerg√™ncia": ["emerg√™ncia", "ajuda", "m√©dico", "pol√≠cia", "hospital"],
            "turismo": ["turismo", "atra√ß√£o", "museu", "ingresso", "informa√ß√£o"],
            "dire√ß√µes": [
                "dire√ß√£o",
                "como chegar",
                "onde fica",
                "localiza√ß√£o",
                "endere√ßo",
            ],
        }

        for scenario, keywords in scenarios.items():
            if any(keyword in query_lower for keyword in keywords):
                return scenario.title()

        # Cen√°rio geral se n√£o identificou espec√≠fico
        return "Situa√ß√µes gerais de turismo"

    def get_emergency_phrases(self, target_language: str) -> Dict[str, str]:
        """Retorna frases essenciais de emerg√™ncia em qualquer idioma."""
        # Esta fun√ß√£o pode ser chamada diretamente para situa√ß√µes de emerg√™ncia
        emergency_template = PromptTemplate(
            input_variables=["language"],
            template="""
Forne√ßa as 10 frases mais importantes de emerg√™ncia em {language} para turistas:

1. "Socorro/Ajuda"
2. "Preciso de um m√©dico"
3. "Chame a pol√≠cia"
4. "Onde fica o hospital?"
5. "N√£o falo [idioma local]"
6. "Estou perdido"
7. "Posso usar seu telefone?"
8. "Onde fica a embaixada do Brasil?"
9. "Preciso de ajuda urgente"
10. "Obrigado pela ajuda"

Para cada frase, inclua:
- Tradu√ß√£o exata
- Pron√∫ncia aproximada em portugu√™s
- Contexto de uso

FRASES DE EMERG√äNCIA:""",
        )

        emergency_chain = emergency_template | self.llm | StrOutputParser()

        try:
            result = emergency_chain.invoke({"language": target_language})
            return {
                "success": True,
                "emergency_phrases": result,
                "language": target_language,
            }
        except Exception as e:
            return {
                "success": False,
                "error": f"Erro ao gerar frases de emerg√™ncia: {str(e)}",
            }
