#!/usr/bin/env python3
"""
Quick Start - Teste r√°pido do Sistema de Guia de Viagem
Execute este arquivo para testar rapidamente as funcionalidades principais.
"""

import os
import sys

def print_header(title):
    """Imprime cabe√ßalho formatado."""
    print(f"\n{'='*60}")
    print(f"üéØ {title}")
    print(f"{'='*60}")

def print_step(step_num, description):
    """Imprime passo formatado."""
    print(f"\nüìã Passo {step_num}: {description}")
    print("-" * 40)

def quick_test():
    """Executa teste r√°pido do sistema."""
    
    print_header("TESTE R√ÅPIDO DO SISTEMA DE GUIA DE VIAGEM")
    
    print("üöÄ Este script vai testar rapidamente as funcionalidades principais")
    print("‚è±Ô∏è Tempo estimado: 2-3 minutos")
    
    # Passo 1: Verificar depend√™ncias b√°sicas
    print_step(1, "Verificando depend√™ncias b√°sicas")
    
    try:
        import importlib
        
        basic_deps = ["os", "sys", "json", "pathlib"]
        for dep in basic_deps:
            importlib.import_module(dep)
            print(f"   ‚úÖ {dep}")
            
    except ImportError as e:
        print(f"   ‚ùå Erro b√°sico: {e}")
        return False
    
    # Passo 2: Verificar estrutura do projeto
    print_step(2, "Verificando estrutura do projeto")
    
    required_files = [
        "src/config.py",
        "src/main.py", 
        "src/router.py",
        "src/rag.py",
        "requirements.txt",
        ".env.example"
    ]
    
    missing_files = []
    for file_path in required_files:
        if os.path.exists(file_path):
            print(f"   ‚úÖ {file_path}")
        else:
            missing_files.append(file_path)
            print(f"   ‚ùå {file_path} (n√£o encontrado)")
    
    if missing_files:
        print(f"\n‚ö†Ô∏è Arquivos em falta: {missing_files}")
        print("üí° Certifique-se de estar na pasta raiz do projeto")
        return False
    
    # Passo 3: Testar importa√ß√µes principais
    print_step(3, "Testando importa√ß√µes principais")
    
    try:
        # Adiciona src ao path se ainda n√£o estiver
        src_path = os.path.join(os.getcwd(), 'src')
        if src_path not in sys.path:
            sys.path.insert(0, src_path)
        
        from config import Config
        print("   ‚úÖ Config importada")
        
        config = Config()
        print("   ‚úÖ Config inicializada")
        
        # Testa configura√ß√µes b√°sicas
        assert hasattr(config, 'GROQ_MODEL'), "GROQ_MODEL n√£o encontrado"
        assert hasattr(config, 'SUPPORTED_CITIES'), "SUPPORTED_CITIES n√£o encontrado" 
        assert hasattr(config, 'INTENTIONS'), "INTENTIONS n√£o encontrado"
        
        print(f"   ‚úÖ Modelo configurado: {config.GROQ_MODEL}")
        print(f"   ‚úÖ Cidades suportadas: {len(config.SUPPORTED_CITIES)}")
        print(f"   ‚úÖ Inten√ß√µes configuradas: {len(config.INTENTIONS)}")
        
    except ImportError as e:
        print(f"   ‚ùå Erro de importa√ß√£o: {e}")
        print(f"   üí° Certifique-se de estar na pasta raiz do projeto")
        return False
    except Exception as e:
        print(f"   ‚ùå Erro de configura√ß√£o: {e}")
        print(f"   üí° Pode ser necess√°rio instalar depend√™ncias: pip install -r requirements.txt")
        return False
    
    # Passo 4: Verificar dados das cidades
    print_step(4, "Verificando dados das cidades")
    
    try:
        import json
        
        city_files = {
            "src/data/rio_janeiro.json": "Rio de Janeiro",
            "src/data/paris.json": "Paris"
        }
        
        total_locations = 0
        for file_path, city_name in city_files.items():
            if os.path.exists(file_path):
                with open(file_path, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    total_locations += len(data)
                    print(f"   ‚úÖ {city_name}: {len(data)} locais")
            else:
                print(f"   ‚ùå {city_name}: arquivo n√£o encontrado")
        
        print(f"   üìä Total: {total_locations} locais na base")
        
    except Exception as e:
        print(f"   ‚ùå Erro ao ler dados: {e}")
        return False
    
    # Passo 5: Testar router b√°sico
    print_step(5, "Testando classifica√ß√£o de inten√ß√µes")
    
    try:
        # Importa o router do m√≥dulo correto
        from router import IntentionRouter
        
        # Cria inst√¢ncia usando mock se necess√°rio
        try:
            router = IntentionRouter()
        except Exception:
            # Se falhar na inicializa√ß√£o (sem LangChain), testa s√≥ o fallback
            print("   ‚ö†Ô∏è Inicializa√ß√£o completa falhou, testando fallback...")
            router = None
        
        # Testa classifica√ß√£o fallback diretamente (n√£o precisa de LangChain)
        if router is not None:
            test_cases = [
                ("Quero um roteiro para Paris", "roteiro-viagem"),
                ("Como chegar ao Cristo Redentor", "logistica-transporte"),
                ("Hor√°rio do Louvre", "info-local"),
                ("Frases em franc√™s", "traducao-idiomas")
            ]
            
            for query, expected in test_cases:
                result = router._fallback_classification(query)
                if result == expected:
                    print(f"   ‚úÖ '{query}' ‚Üí {result}")
                else:
                    print(f"   ‚ö†Ô∏è '{query}' ‚Üí {result} (esperado: {expected})")
        else:
            print("   ‚ÑπÔ∏è Teste de router pulado (depend√™ncias n√£o instaladas)")
        
    except Exception as e:
        print(f"   ‚ùå Erro no router: {e}")
        print(f"   üí° Execute: pip install -r requirements.txt para funcionalidade completa")
        # N√£o retorna False aqui, continua o teste
        pass
    
    # Passo 6: Verificar arquivo .env
    print_step(6, "Verificando configura√ß√£o de ambiente")
    
    env_file = ".env"
    if os.path.exists(env_file):
        print("   ‚úÖ Arquivo .env existe")
        
        # Verifica conte√∫do b√°sico
        with open(env_file, 'r') as f:
            content = f.read()
            
        if "GROQ_API_KEY" in content:
            print("   ‚úÖ GROQ_API_KEY configurada")
        else:
            print("   ‚ö†Ô∏è GROQ_API_KEY n√£o encontrada")
            
        if "PINECONE_API_KEY" in content:
            print("   ‚úÖ PINECONE_API_KEY configurada")  
        else:
            print("   ‚ö†Ô∏è PINECONE_API_KEY n√£o encontrada")
            
    else:
        print("   ‚ö†Ô∏è Arquivo .env n√£o existe")
        print("   üí° Execute: cp .env.example .env")
        print("   üí° E configure suas chaves de API")
    
    # Resumo final
    print_header("RESUMO DO TESTE")
    
    print("‚úÖ Estrutura do projeto: OK")
    print("‚úÖ Configura√ß√µes b√°sicas: OK")  
    print("‚úÖ Dados das cidades: OK")
    print("‚úÖ Router de inten√ß√µes: OK")
    
    if os.path.exists(".env"):
        print("‚úÖ Arquivo .env: OK")
    else:
        print("‚ö†Ô∏è Arquivo .env: Precisa ser configurado")
    
    print(f"\nüéâ SISTEMA PRONTO PARA USO!")
    print("\nüìã Pr√≥ximos passos:")
    print("   1. Configure suas APIs no arquivo .env (se ainda n√£o fez)")
    print("   2. Instale depend√™ncias: pip install -r requirements.txt") 
    print("   3. Execute: python src/main.py")
    print("   4. Ou teste exemplos: python examples/demo.py")
    
    return True

def main():
    """Fun√ß√£o principal."""
    try:
        success = quick_test()
        
        if success:
            print(f"\n{'üéä' * 20}")
            print("TESTE CONCLU√çDO COM SUCESSO!")
            print(f"{'üéä' * 20}")
        else:
            print(f"\n{'‚ö†Ô∏è' * 20}")
            print("TESTE ENCONTROU PROBLEMAS")
            print("Verifique os erros acima e tente novamente")
            print(f"{'‚ö†Ô∏è' * 20}")
            
    except KeyboardInterrupt:
        print(f"\n\nüëã Teste interrompido pelo usu√°rio")
    except Exception as e:
        print(f"\n‚ùå Erro inesperado: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()