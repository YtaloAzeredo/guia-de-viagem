#!/usr/bin/env python3
"""
Demo Final do Sistema de Guia de Viagem Inteligente
Demonstra todas as funcionalidades do sistema usando LangChain Router Chains, Groq e RAG.
"""

from src.main import TravelGuideSystem


def print_separator(title: str):
    """Imprime um separador decorativo."""
    print(f"\n{'='*60}")
    print(f"üåü {title}")
    print('='*60)


def print_response(query: str, response: dict):
    """Imprime uma resposta formatada."""
    print(f"üî∏ Consulta: '{query}'")
    print(f"‚úÖ Inten√ß√£o identificada: {response['intention']}")
    print(f"üîß Chain usada: {response['chain_used']}")
    
    # Identifica a chave de conte√∫do principal
    content_keys = {
        'itinerary': 'üìã Roteiro',
        'local_info': 'üìç Informa√ß√µes',
        'logistics_info': 'üöó Log√≠stica',
        'translation_guide': 'üó£Ô∏è Tradu√ß√£o'
    }
    
    for key, label in content_keys.items():
        if key in response:
            print(f"\n{label}:")
            print("-" * 40)
            content = response[key]
            # Mostra os primeiros 300 caracteres
            if len(content) > 300:
                print(content[:300] + "...")
            else:
                print(content)
            break
    
    print()


def main():
    """Demonstra√ß√£o completa do sistema."""
    
    print_separator("SISTEMA DE GUIA DE VIAGEM INTELIGENTE")
    print("üöÄ Demonstra√ß√£o das funcionalidades usando LangChain Router Chains")
    print("ü§ñ Powered by Groq LLM + RAG com busca sem√¢ntica")
    print("üìä Status do sistema: Modo fallback ativo (dados locais)")
    
    # Inicializar sistema
    print("\n‚è≥ Inicializando sistema...")
    system = TravelGuideSystem()
    print("‚úÖ Sistema pronto!")
    
    # Testes por categoria
    test_cases = [
        {
            'title': 'ROTEIROS DE VIAGEM',
            'queries': [
                'Quero um roteiro cultural em Paris por 3 dias',
                'Roteiro rom√¢ntico no Rio de Janeiro por 2 dias'
            ]
        },
        {
            'title': 'INFORMA√á√ïES LOCAIS',
            'queries': [
                'Melhores restaurantes no Rio de Janeiro',
                'Atra√ß√µes tur√≠sticas em Paris'
            ]
        },
        {
            'title': 'LOG√çSTICA E TRANSPORTE',
            'queries': [
                'Como chegar ao Cristo Redentor?',
                'Melhor transporte p√∫blico em Paris'
            ]
        },
        {
            'title': 'TRADU√á√ÉO E IDIOMAS',
            'queries': [
                'Frases b√°sicas em franc√™s para turistas',
                'Como pedir comida em ingl√™s'
            ]
        }
    ]
    
    # Executar testes
    for category in test_cases:
        print_separator(category['title'])
        
        for query in category['queries']:
            response = system.process_query(query)
            print_response(query, response)
    
    # Demonstra√ß√£o das capacidades do RAG
    print_separator("CAPACIDADES DO SISTEMA RAG")
    print("üìä Dados indexados:")
    print(f"  ‚Ä¢ Cidades: Rio de Janeiro, Paris")
    print(f"  ‚Ä¢ Total de locais: 19 pontos de interesse")
    print(f"  ‚Ä¢ Categorias: Atra√ß√µes, Restaurantes, Transporte")
    print(f"  ‚Ä¢ Modo: Fallback local (busca textual)")
    
    print("\nüîç Exemplo de busca sem√¢ntica:")
    response = system.process_query('Lugares rom√¢nticos no Rio')
    print(f"  Consulta: 'Lugares rom√¢nticos no Rio'")
    print(f"  Locais encontrados: {response.get('places_found', 0)}")
    
    print_separator("RESUMO DA DEMONSTRA√á√ÉO")
    print("‚úÖ Router Chain: Classifica√ß√£o autom√°tica de inten√ß√µes")
    print("‚úÖ Specialized Chains: 4 cadeias especializadas")
    print("‚úÖ RAG System: Recupera√ß√£o de informa√ß√µes contextuais")
    print("‚úÖ Groq Integration: LLM r√°pido para gera√ß√£o de respostas")
    print("‚úÖ Fallback Mode: Sistema resiliente a falhas de depend√™ncias")
    
    print("\nüéØ Tecnologias demonstradas:")
    print("  ‚Ä¢ LangChain Router Chains para classifica√ß√£o de inten√ß√µes")
    print("  ‚Ä¢ Groq llama-3.1-8b-instant para infer√™ncia r√°pida")
    print("  ‚Ä¢ Sistema RAG com busca sem√¢ntica (fallback textual)")
    print("  ‚Ä¢ Arquitetura modular e resiliente")
    
    print("\nüåü O sistema est√° pronto para ser integrado em aplica√ß√µes reais!")


if __name__ == "__main__":
    main()